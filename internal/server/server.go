package server

import (
	"log"
	"net/http"
	"time"

	"github.com/go-chi/chi"
	"github.com/go-chi/chi/middleware"
	_ "github.com/rojasuap/go-backend-api_facturacion/cmd/microblog/docs" // docs is generated by Swag CLI, you have to import it.
	v1 "github.com/rojasuap/go-backend-api_facturacion/internal/server/v1"
	"github.com/rs/cors"
	httpSwagger "github.com/swaggo/http-swagger"
)

// Server is a base server configuration.
type Server struct {
	server *http.Server
}

// @title Swagger AveOline API
// @version 1.0
// @description This is a sample server AveOline server.
// @termsOfService http://swagger.io/terms/

// @contact.name API Support
// @contact.url http://www.swagger.io/support
// @contact.email support@swagger.io

// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html

// @host aveonline.swagger.io
// @BasePath /v2
func New(port string) (*Server, error) {
	r := chi.NewRouter()

	r.Use(middleware.Logger)
	r.Use(middleware.Recoverer)
	r.Get("/swagger/*", httpSwagger.Handler(
		httpSwagger.URL("http://localhost:9000/swagger/doc.json"), //The url pointing to API definition
	))
	//r.Mount("/swagger", httpSwagger.WrapHandler)

	r.Mount("/api/v1", v1.New())

	cors := cors.New(cors.Options{
		AllowedOrigins: []string{"*"},
		AllowedHeaders: []string{"Content-Type", "Content-Length", "Accept-Encoding", "X-CSRF-Token", "Authorization"},
		AllowedMethods: []string{"GET", "PATCH", "POST", "PUT", "OPTIONS", "DELETE"},
	})

	serv := &http.Server{
		Addr:         ":" + port,
		Handler:      cors.Handler(r),
		ReadTimeout:  10 * time.Second,
		WriteTimeout: 10 * time.Second,
	}

	server := Server{server: serv}

	return &server, nil
}

// Close server resources.
func (serv *Server) Close() error {
	// TODO: add resource closure.
	return nil
}

// Start the server.
func (serv *Server) Start() {
	log.Printf("Server running on http://localhost%s", serv.server.Addr)
	log.Fatal(serv.server.ListenAndServe())
}
